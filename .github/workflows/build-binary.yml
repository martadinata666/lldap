name: build binary

on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always

# In total 5 jobs, all the jobs are containerized
# ---

#######################################################################################
# GitHub actions randomly timeout when downloading musl-gcc                           #
# Using lldap dev image based on https://hub.docker.com/_/rust and musl-gcc bundled   #
# Look into .github/workflows/Dockerfile.dev for development image details            #
#######################################################################################

# build-ui , create/compile the web
### install wasm
### install rollup
### run app/build.sh
### upload artifacts

# builds-armhf, build-aarch64, build-amd64 create binary for respective arch
### Add non-native architecture dpkg --add-architecture XXX
### Install dev tool gcc g++, etc. per respective arch
### Cargo build
### Upload artifacts

## the CARGO_ env
#CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
# This will determine which architecture lib will be used.

# build-ui,builds-armhf, build-aarch64, build-amd64 will upload artifacts will be used next job
# build-docker-image job will fetch artifacts and run Dockerfile.ci then push the image.

# cache based on Cargo.lock

jobs:
  build-bin:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #target: [armv7-unknown-linux-gnueabihf,aarch64-unknown-linux-musl,x86_64-unknown-linux-musl,x86_64_unknown_freebsd]
        target: [x86_64_unknown_freebsd]
    container:
      image: lldap/rust-dev
      env:
        CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-musl-gcc
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: x86_64-linux-musl-gcc
        CARGO_TARGET_X86_64_UNKNOWN_FREEBSD_LINKER: clang
        CC_x86_64_unknown_freebsd: clang
        CARGO_TERM_COLOR: always
        RUSTFLAGS: -Ctarget-feature=+crt-static
        CARGO_HOME: ${GITHUB_WORKSPACE}/.cargo
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            .cargo/registry/index
            .cargo/registry/cache
            .cargo/git/db
            target/
          key: lldap-bin-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            lldap-bin-${{ matrix.target }}-
      - name: Install Clang
        run: |
             apt update
             apt install -y clang tar xz-utils
      - name: Fetch FreeBSD
        run:  |
              cd /tmp
              wget http://ftp.plusline.de/FreeBSD/releases/amd64/13.2-RELEASE/base.txz
              mkdir -p /opt/cross-freebsd-13
              cd /opt/cross-freebsd-13
              tar -xf /tmp/base.txz ./lib/ ./usr/lib/ ./usr/include/
              cd /opt/cross-freebsd-13/usr/lib
              find . -xtype l|xargs ls -l|grep ' /lib/' | awk '{print "ln -sf /opt/cross-freebsd-13"$11 " " $9}' | /bin/sh
              ln -s libc++.a /opt/cross-freebsd-13/usr/lib/libstdc++.a
              ln -s libc++.so /opt/cross-freebsd-13/usr/lib/libstdc++.so 
              rm -f /tmp/base.txz
      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: compile ${{ matrix.target }}
        run: cargo build --target=${{ matrix.target }} --release -p lldap -p lldap_migration_tool -p lldap_set_password

      - name: check path
        run: ls -alr target/release

      - name: upload ${{ matrix.target}} lldap artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target}}-lldap-bin
          path: target/${{ matrix.target }}/release/lldap

      - name: upload ${{ matrix.target }} migration tool artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-migration-tool-bin
          path: target/${{ matrix.target }}/release/lldap_migration_tool

      - name: upload ${{ matrix.target }}-set-password-bin
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-lldap-set-password-bin
          path: target/${{ matrix.target }}/release/lldap_set_password

